<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/20/2022 12:39:44 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-L8NC9RK"
  DTS:CreatorName="DESKTOP-L8NC9RK\HP"
  DTS:DTSID="{115FE116-41C9-487A-B661-DD0833B36323}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.845.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="159"
  DTS:PackageType="5"
  DTS:VersionBuild="7"
  DTS:VersionGUID="{926A88A4-01E0-4A6B-A658-1FC4809C2FD0}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DBConn]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{F64664D7-CDCA-40AF-9D79-5F14AC17FE94}"
      DTS:ObjectName="DBConn">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=.;Initial Catalog=TechBro;Integrated Security=True;Application Name=SSIS-158-{F64664D7-CDCA-40AF-9D79-5F14AC17FE94}LocalHost.TechBro;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5DCCD60F-006A-4E8F-B93E-5AEDFBDEF910}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Folder">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\HP\Desktop\SSIS\154</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BC540423-4176-41BA-9A1F-37E90BB58970}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Schema">
      <DTS:VariableValue
        DTS:DataType="8">dbo</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A3B960A2-BDD5-4146-860E-76A4F9A446C3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Sheet">
      <DTS:VariableValue
        DTS:DataType="8">Customer</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{67DF41DE-CDB9-45CE-B1C0-3242D0DDC059}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Table">
      <DTS:VariableValue
        DTS:DataType="8">Customer</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{A04EDF00-BEBF-4C19-91B6-5BD862BEB408}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_e4dd9959331f4d7b9ff6422e96fe47eb"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::Folder,User::Schema,User::Sheet,User::Table">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e4dd9959331f4d7b9ff6422e96fe47eb.Properties.Settings.get_Default():ST_e4dd9959331f4d7b9ff6422e96fe47eb.Properties.Sett" +
    "ings")]

namespace ST_e4dd9959331f4d7b9ff6422e96fe47eb.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.OleDb;
using System.Data.SqlClient;
#endregion

namespace ST_e4dd9959331f4d7b9ff6422e96fe47eb
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            string FolderPath = Dts.Variables["User::Folder"].Value.ToString();
            string TableName = Dts.Variables["User::Table"].Value.ToString();
            string SchemaName = Dts.Variables["User::Schema"].Value.ToString();
            string SheetNameToLoad = Dts.Variables["User::Sheet"].Value.ToString();

            var directory = new DirectoryInfo(FolderPath);
            FileInfo[] files = directory.GetFiles();

            //Declare and initilize variables
            string fileFullPath = "";


            SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["DBConn"].AcquireConnection(Dts.Transaction) as SqlConnection);

            //Get one Book(Excel file at a time)
            foreach (FileInfo file in files)
            {
                fileFullPath = FolderPath + "\\" + file.Name;

                //Create Excel Connection
                string ConStr;
                string HDR;
                HDR = "YES";
                ConStr = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + fileFullPath + ";Extended Properties=\"Excel 12.0;HDR=" + HDR + ";IMEX=0\"";
                OleDbConnection cnn = new OleDbConnection(ConStr);

                //Get Sheet Name
                cnn.Open();
                DataTable dtSheet = cnn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                string sheetname;
                sheetname = "";
                //Only read data from provided SheetNumber

                foreach (DataRow drSheet in dtSheet.Rows)
                {

                    if (drSheet["TABLE_NAME"].ToString().Contains("$"))
                    {
                        sheetname = drSheet["TABLE_NAME"].ToString();
                        // MessageBox.Show(sheetname);

                        //Load the Data if Sheet Name contains value of SheetNameLike 
                        if (sheetname.Contains(SheetNameToLoad) == true)
                        {



                            //Load the DataTable with Sheet Data so we can get the column header
                            OleDbCommand oconn = new OleDbCommand("select top 1 * from [" + sheetname + "]", cnn);
                            OleDbDataAdapter adp = new OleDbDataAdapter(oconn);
                            DataTable dt = new DataTable();
                            adp.Fill(dt);
                            cnn.Close();

                            //Prepare Header columns list so we can run against Database to get matching columns for a table.
                            string ExcelHeaderColumn = "";
                            string SQLQueryToGetMatchingColumn = "";
                            for (int i = 0; i < dt.Columns.Count; i++)
                            {
                                if (i != dt.Columns.Count - 1)
                                    ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'" + ",";
                                else
                                    ExcelHeaderColumn += "'" + dt.Columns[i].ColumnName + "'";
                            }

                            SQLQueryToGetMatchingColumn = "select STUFF((Select  ',['+Column_Name+']' from Information_schema.Columns where Table_Name='" +
                                TableName + "' and Table_SChema='" + SchemaName + "'" +
                                "and Column_Name in (" + @ExcelHeaderColumn + ") for xml path('')),1,1,'') AS ColumnList";

                            // MessageBox.Show(SQLQueryToGetMatchingColumn);
                            // MessageBox.Show(ExcelHeaderColumn);


                            //Get Matching Column List from SQL Server
                            string SQLColumnList = "";
                            SqlCommand cmd = myADONETConnection.CreateCommand();
                            cmd.CommandText = SQLQueryToGetMatchingColumn;
                            SQLColumnList = (string)cmd.ExecuteScalar();

                            // MessageBox.Show(" Matching Columns: " + SQLColumnList);


                            //Use Actual Matching Columns to get data from Excel Sheet
                            OleDbConnection cnn1 = new OleDbConnection(ConStr);
                            cnn1.Open();
                            OleDbCommand oconn1 = new OleDbCommand("select " + SQLColumnList + " from [" + sheetname + "]", cnn1);
                            OleDbDataAdapter adp1 = new OleDbDataAdapter(oconn1);
                            DataTable dt1 = new DataTable();
                            adp1.Fill(dt1);
                            cnn1.Close();


                            //Load Data from DataTable to SQL Server Table.
                            using (SqlBulkCopy BC = new SqlBulkCopy(myADONETConnection))
                            {
                                BC.DestinationTableName = SchemaName + "." + TableName;
                                foreach (var column in dt1.Columns)
                                    BC.ColumnMappings.Add(column.ToString(), column.ToString());
                                BC.WriteToServer(dt1);
                            }

                        }
                    }

                }

            }

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_e4dd9959331f4d7b9ff6422e96fe47eb.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{10eff5ca-b927-4434-988d-01cf9b567cbd}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_e4dd9959331f4d7b9ff6422e96fe47eb</RootNamespace>
    <AssemblyName>ST_e4dd9959331f4d7b9ff6422e96fe47eb</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex=""></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_ST150</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_e4dd9959331f4d7b9ff6422e96fe47eb</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_e4dd9959331f4d7b9ff6422e96fe47eb</msb:DisplayName>
    <msb:ProjectId>{EB6DC42E-BBD5-4157-A2F6-83EE9A1A24B9}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_e4dd9959331f4d7b9ff6422e96fe47eb.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_e4dd9959331f4d7b9ff6422e96fe47eb")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_e4dd9959331f4d7b9ff6422e96fe47eb")]
[assembly: AssemblyCopyright("Copyright @  2022")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e4dd9959331f4d7b9ff6422e96fe47eb.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e4dd9959331f4d7b9ff6422e96fe47eb.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e4dd9959331f4d7b9ff6422e96fe47eb.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_e4dd9959331f4d7b9ff6422e96fe47eb.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_e4dd9959331f4d7b9ff6422e96fe47eb.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_e4dd9959331f4d7b9ff6422e96fe47eb.dll">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
yAUAAFAIAAAjU3RyaW5ncwAAAAAYDgAAkAMAACNVUwCoEQAAEAAAACNHVUlEAAAAuBEAACwCAAAj
QmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAA4AAAABQAAAAYAAAAJAAAAAQAAAEIA
AAACAAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAABQAAAAEAAAABAAAAAAB0BAEAAAAAAAYACwN1
BgYAmgN1BgYAVwJiBg8A6QYAAAYAhAIXBQYA7gIXBQYAzwIXBQYAgQMXBQYAKwMXBQYARAMXBQYA
mwIXBQYAtgLIAwoAXwMjBAoArQEjBA4AlQXpBwYAtgUKAA4AcwVHAAYAOwZ2Bw4ALgg7AA4A5AA7
AA4AQwjpBwYAxweqBAYA9wCqBAYAsQSqBAYAOgJiBgYA+gWVBgYAvwXyBBIACgJeBBIAawJeBBIA
5AHdBAYAHwJ1BgoATAQjBBYAMgdYARYA7gBYAQYA2gUKABYAjQdYARYACgZYAQYAywUKAAYA/QOq
BA4AdgWjBQ4AigBHAAYAlQCqBA4AYQU7AA4AyQE7AA4AmgBHAA4AHAZHAA4AHwajBQ4ATAU7AA4A
0gQ7AA4AtQDpBw4AnQCjBQ4AKQXpBw4A4gPpBwYAeAGqBAYAAwGqBAYAOggXBQAAAAABAAAAAAAB
AAEAAQAQAMcEWQA5AAEAAQAAABAAnAb4BlkAAQADAAABEABYB/gGeQADAAcAAwEAAKkHAABhAAQA
CgARALYELQERAJ0BMQERAMAANQEGBjMAOQFWgJkHPAFWgH0BPAFQIAAAAACGAM0EBgABAIwkAAAA
AIYYVQYGAAEAlCQAAAAAgxhVBgYAAQCcJAAAAACTCPYFQAEBAMgkAAAAAJMIhQFFAQEAzyQAAAAA
kwiRAUoBAQDXJAAAAACWCM4HUAECAN4kAAAAAIYYVQYGAAIA5iQAAAAAkRhbBlUBAgAAAAEAwgMJ
AFUGAQARAFUGBgAZAFUGCgApAFUGEAAxAFUGEAA5AFUGEABBAFUGEABJAFUGEABRAFUGEABZAFUG
EABhAFUGEABpAFUGBgDJAFUGBgDpAFUGFQD5AFUGBgBxAKEHRQABAS4HSwAJAaEEUQARAbgDWACx
APsDXAAZAVUGEAAZATwHYAB5AFUGBgABAYkHZgAhAaEEbAABAQcFWAApAYMFcwAxAScBXAA5AcAH
eAA5AcAHfwCJAFUGEABBAcIEBgBJAScHhQCJANAAigChALcHlABhAUcGmgCRAP8HWACZAKEEnwA5
AWEHpABpAVUGqQBxAVUGsAChAFUGBgB5AZwEtwBBAfwBBgChAGoHvQBhAQsIwwCBAaEExwCJAUkB
XAA5AcAHzgB5AKcA1gCZAR4IEACZAegFWACpAFUG3ACpADABEACpAEUH4gChAYYA6ACRABUI8AC5
AAICBgCpAC0G9AABAdoHAQBxAFUGBgCxAFUGBgCxARUB+gCxATYIAwHRAFUGCQHxAFUGBgAIABQA
IwEIABgAKAEpAHMAkAEuAAsAaAEuABMAcQEuABsAkAEuACMAmQEuACsAwgEuADMAwgEuADsAwgEu
AEMAmQEuAEsAyAEuAFMAwgEuAFsA3wFDAGMAKAFJAHMAkAFhAHsAKAFjAGsAKAEbAAMAAQAEAAMA
AAD6BVkBAAClAV4BAADSB2MBAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAACIIFheAAAA
AAAAWQAAAAQAAAAAAAAAAAAAABEBfQAAAAAADwAAAAAAAAAAAAAAGgEEBAAAAAAEAAAAAAAAAAAA
AAARATsAAAAAAAQAAAAAAAAAAAAAABEBqgQAAAAADwAAAAAAAAAAAAAAGgEUAAAAAAAAAAAAAQAA
AKYGAAAFAAIAAAAAPE1vZHVsZT4AU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdl
ZERUUwB2YWx1ZV9fAFN5c3RlbS5EYXRhAFN5c3RlbS5EYXRhLk9sZURiAFNUX2U0ZGQ5OTU5MzMx
ZjRkN2I5ZmY2NDIyZTk2ZmU0N2ViAG1zY29ybGliAEFkZABPbGVEYlNjaGVtYUd1aWQAT2xlRGJD
b21tYW5kAENyZWF0ZUNvbW1hbmQAU3FsQ29tbWFuZABkZWZhdWx0SW5zdGFuY2UAR2V0T2xlRGJT
Y2hlbWFUYWJsZQBEYXRhVGFibGUAVmFyaWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5k
bGUAR2V0VHlwZUZyb21IYW5kbGUAZ2V0X05hbWUAc2V0X0Rlc3RpbmF0aW9uVGFibGVOYW1lAGdl
dF9Db2x1bW5OYW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVHlwZQBGYWlsdXJl
AGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmpl
Y3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5n
c0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRl
ZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1
dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1i
bHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29u
ZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0
aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5
Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3Nl
bWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1Zh
bHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAU3FsQnVsa0NvcHlDb2x1bW5NYXBw
aW5nAFRvU3RyaW5nAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21w
b25lbnRNb2RlbABTVF9lNGRkOTk1OTMzMWY0ZDdiOWZmNjQyMmU5NmZlNDdlYi5kbGwARmlsbABn
ZXRfSXRlbQBTeXN0ZW0ARW51bQByZXNvdXJjZU1hbgBPcGVuAFNjcmlwdE1haW4ARGF0YUNvbHVt
bgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRfVHJhbnNhY3Rp
b24AU3lzdGVtLlJlZmxlY3Rpb24AU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5nQ29sbGVjdGlvbgBE
YXRhQ29sdW1uQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBPbGVEYkNvbm5lY3Rpb24AQWNx
dWlyZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24ARmlsZUluZm8A
Q3VsdHVyZUluZm8ARmlsZVN5c3RlbUluZm8ARGlyZWN0b3J5SW5mbwBFeGVjdXRlU2NhbGFyAGdl
dF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIAT2xlRGJEYXRhQWRhcHRlcgBXcml0
ZVRvU2VydmVyAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9yAFN5c3RlbS5E
aWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJj
ZXMAU1RfZTRkZDk5NTkzMzFmNGQ3YjlmZjY0MjJlOTZmZTQ3ZWIuUHJvcGVydGllcy5SZXNvdXJj
ZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2U0ZGQ5OTU5MzMxZjRkN2I5ZmY2NDIyZTk2
ZmU0N2ViLlByb3BlcnRpZXMAVGFibGVzAGdldF9WYXJpYWJsZXMAR2V0RmlsZXMAZ2V0X0NvbHVt
bk1hcHBpbmdzAFNldHRpbmdzAENvbnRhaW5zAGdldF9Db2x1bW5zAFN5c3RlbS5Db2xsZWN0aW9u
cwBnZXRfQ29ubmVjdGlvbnMAU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X1Jvd3MA
Q29uY2F0AE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jlc3VsdABTeXN0ZW0uRGF0YS5TcWxD
bGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvdW50AE1vdmVOZXh0AHNldF9Db21tYW5kVGV4dABEYXRh
Um93AGdldF9Bc3NlbWJseQBTcWxCdWxrQ29weQAAABlVAHMAZQByADoAOgBGAG8AbABkAGUAcgAA
F1UAcwBlAHIAOgA6AFQAYQBiAGwAZQAAGVUAcwBlAHIAOgA6AFMAYwBoAGUAbQBhAAAXVQBzAGUA
cgA6ADoAUwBoAGUAZQB0AAABAA1EAEIAQwBvAG4AbgAAA1wAAAdZAEUAUwAAXVAAcgBvAHYAaQBk
AGUAcgA9AE0AaQBjAHIAbwBzAG8AZgB0AC4AQQBDAEUALgBPAEwARQBEAEIALgAxADIALgAwADsA
RABhAHQAYQAgAFMAbwB1AHIAYwBlAD0AAEs7AEUAeAB0AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQBy
AHQAaQBlAHMAPQAiAEUAeABjAGUAbAAgADEAMgAuADAAOwBIAEQAUgA9AAAROwBJAE0ARQBYAD0A
MAAiAAAVVABBAEIATABFAF8ATgBBAE0ARQAAAyQAACtzAGUAbABlAGMAdAAgAHQAbwBwACAAMQAg
ACoAIABmAHIAbwBtACAAWwAAA10AAAMnAAEFJwAsAAGAu3MAZQBsAGUAYwB0ACAAUwBUAFUARgBG
ACgAKABTAGUAbABlAGMAdAAgACAAJwAsAFsAJwArAEMAbwBsAHUAbQBuAF8ATgBhAG0AZQArACcA
XQAnACAAZgByAG8AbQAgAEkAbgBmAG8AcgBtAGEAdABpAG8AbgBfAHMAYwBoAGUAbQBhAC4AQwBv
AGwAdQBtAG4AcwAgAHcAaABlAHIAZQAgAFQAYQBiAGwAZQBfAE4AYQBtAGUAPQAnAAEpJwAgAGEA
bgBkACAAVABhAGIAbABlAF8AUwBDAGgAZQBtAGEAPQAnAAErJwBhAG4AZAAgAEMAbwBsAHUAbQBu
AF8ATgBhAG0AZQAgAGkAbgAgACgAAVMpACAAZgBvAHIAIAB4AG0AbAAgAHAAYQB0AGgAKAAnACcA
KQApACwAMQAsADEALAAnACcAKQAgAEEAUwAgAEMAbwBsAHUAbQBuAEwAaQBzAHQAAQ9zAGUAbABl
AGMAdAAgAAAPIABmAHIAbwBtACAAWwAAAy4AAHFTAFQAXwBlADQAZABkADkAOQA1ADkAMwAzADEA
ZgA0AGQANwBiADkAZgBmADYANAAyADIAZQA5ADYAZgBlADQANwBlAGIALgBQAHIAbwBwAGUAcgB0
AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAseWx8YPiUkKdlzumE3FzNwAEIAEBCAMgAAEF
IAEBEREEIAEBDgUgAQERcSkHGg4ODg4OEj0dEkEIEkEODhJFDhJJEk0SUQ4ODhJFElEIElUSSRwS
XQUgABKAgQUgABKAhQYgARKAiRwDIAAcAyAADgUgAB0SQQUgABKAkQYgARKAlRwEIAEcHAYAAw4O
Dg4FAAEOHQ4EBhGAqQkgAhJREYCpHRwFIAASgK0EIAASSQQgARwOBCABAg4GIAIBDhJFBiABARKA
tQUgAQgSUQUgABKAwQMgAAgGIAESgMUIBwAEDg4ODg4FIAASgMkFIAEBEj0FIAASgNEHIAISgNUO
DgMgAAIFIAEBElEIAAESgNkRgN0FIAASgOEHIAIBDhKA4Qi3elxWGTTgiQiJhF3NgIDMkQQAAAAA
BAEAAAADBhJpAwYSbQMGEhACBggDBhEUBAAAEmkEAAASbQUAAQESbQQAABIQAwAAAQQIABJpBAgA
Em0ECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAo
AQAjU1RfZTRkZDk5NTkzMzFmNGQ3YjlmZjY0MjJlOTZmZTQ3ZWIAAAUBAAAAABYBABFDb3B5cmln
aHQgQCAgMjAyMgAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43AQBUDhRGcmFtZXdvcmtE
aXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjcAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5S
ZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1
cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3Vy
Y2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAuDkAAAAAAAAAAAAA
0jkAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMQ5AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNj
b3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAAAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEAWF6IIAAAAQBYXoggPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAw
ADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkA
TgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABT
AFQAXwBlADQAZABkADkAOQA1ADkAMwAzADEAZgA0AGQANwBiADkAZgBmADYANAAyADIAZQA5ADYA
ZgBlADQANwBlAGIAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAAz
ADIAOAAuADIANAAxADUAMgAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQA
XwBlADQAZABkADkAOQA1ADkAMwAzADEAZgA0AGQANwBiADkAZgBmADYANAAyADIAZQA5ADYAZgBl
ADQANwBlAGIALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMA
bwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADIAMgAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBk
AGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfAGUANABkAGQAOQA5ADUAOQAzADMAMQBmADQAZAA3AGIAOQBmAGYANgA0ADIAMgBl
ADkANgBmAGUANAA3AGUAYgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwBlADQAZABkADkAOQA1ADkAMwAzADEAZgA0AGQANwBiADkAZgBmADYANAAyADIAZQA5
ADYAZgBlADQANwBlAGIAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADgAMwAyADgALgAyADQAMQA1ADIAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADgAMwAyADgALgAyADQAMQA1ADIAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA5DkAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="130.4,41.6"
          Id="Package\Script Task"
          TopLeft="319.999987284343,156.000001239777" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>